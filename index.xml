<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technology Blog</title>
    <link>https://jackson99011.github.io/</link>
    <description>Recent content on Technology Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Fri, 11 Feb 2022 10:07:47 +0600</lastBuildDate><atom:link href="https://jackson99011.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTTP</title>
      <link>https://jackson99011.github.io/blog/http/</link>
      <pubDate>Fri, 11 Feb 2022 10:07:47 +0600</pubDate>
      
      <guid>https://jackson99011.github.io/blog/http/</guid>
      <description>超文本傳輸協定(HTTP) 超文本傳輸協定（英語：HyperText Transfer Protocol，縮寫：HTTP）是一種用於分佈式、協作式和超媒體訊息系統的應用層協定。HTTP是全球資訊網的數據通信的基礎。
設計HTTP最初的目的是為了提供一種發布和接收HTML頁面的方法。透過HTTP或者HTTPS協定請求的資源由統一資源識別碼（Uniform Resource Identifiers，URI）來標識。
主要是架構於 TCP/IP 之上的 應用層，為 無狀態 的 請求-回應 通訊協定。</description>
    </item>
    
    <item>
      <title>設計原則-1</title>
      <link>https://jackson99011.github.io/blog/designobject-2/</link>
      <pubDate>Wed, 14 Jul 2021 09:07:47 +0800</pubDate>
      
      <guid>https://jackson99011.github.io/blog/designobject-2/</guid>
      <description>原則(Principle)  所謂原則 就是一種概念或價值用來引導你來產生適切的行為與價值評量的方法。 依循原則比例越高代表程式碼品質越好。  OOP物件導向設計的Solid設計原則  單一責任原則 (SRP，Single Responsibility Principle) 開放/封閉原則 (OCP，Open Close Principle) Liskov替換 (LSP，Liskov Substitution Principle) 介面隔離原則 (ISP，Interface Segregation Principle) 依賴反轉原則 (DSP，Dependency Inversion Principle)  內聚力(Cohesion) 在一個類別完成一件工作的度量指標</description>
    </item>
    
    <item>
      <title>物件導向核心</title>
      <link>https://jackson99011.github.io/blog/designobject-1/</link>
      <pubDate>Wed, 10 Mar 2021 08:07:47 +0800</pubDate>
      
      <guid>https://jackson99011.github.io/blog/designobject-1/</guid>
      <description>OOP的四個特性 抽象(Abstration)  抽象可以想像成一種概念，並不存在於世界上。 將真實世界的需求轉換為物件導向的類別，類別包含屬性和方法。  abstract class Printer{  int type;  String name;  void printf(){  System.</description>
    </item>
    
    <item>
      <title>資深工程師含意</title>
      <link>https://jackson99011.github.io/blog/sensiorbackendsoftware/</link>
      <pubDate>Mon, 01 Mar 2021 10:09:47 +0600</pubDate>
      
      <guid>https://jackson99011.github.io/blog/sensiorbackendsoftware/</guid>
      <description>如何才有資格稱為資深工程師? 外部參考引用(如何才有資格稱為資深工程師)
技術能力層面 對工具技術有深入的掌握度 這個特點大概是一般人用來評斷資深工程師能力最明顯的表象特徵，也就是是否將常用的工具能練得很熟或是對語言理解得夠深，同時也將技術內化到自己平常的開發習慣裡，達到信手捻來的境界。這樣的資深工程師在開發上能有全面性的考量，同時也能幫助團隊更有效率地達成目標。
反指標： 有時這個能力會以個人開發的效率來評估，使得有人常常誤認為只要能很快完成功能就有資格當資深工程師，但他們卻忽略掉其他更值得注意的能力，結果為團隊帶來災難。
能寫出可理解可維護的程式碼 這個特點的特徵就是平時就會撰寫測試、並對自己的程式碼做重構；對於自己的程式碼風格、變數或方法名稱等都非常要求，也絕對不會特意去走難懂的捷徑。這樣的資深工程師是非常自律的，所以被他 code review 時可能會有點痛苦，但絕對會學到很多。通常到這個階段的工程師，都是心靈上已經受過不少傷害，也對自己發過誓不再讓自己的程式碼傷害他人。</description>
    </item>
    
    <item>
      <title>MarkDowm 練習測試</title>
      <link>https://jackson99011.github.io/blog/markdown-test/</link>
      <pubDate>Mon, 01 Mar 2021 10:07:47 +0600</pubDate>
      
      <guid>https://jackson99011.github.io/blog/markdown-test/</guid>
      <description>Hello world
一級標題 二級標題 三級標題 四級標題 五級標題 六級標題 我是學生，我喜歡學習。
 list1  list11  list11     list2 list3   hello  hello world   hello1  外部引用</description>
    </item>
    
    <item>
      <title>How To Use Checklists To Improve Your UX</title>
      <link>https://jackson99011.github.io/blog/post-1/</link>
      <pubDate>Tue, 29 Oct 2019 10:07:47 +0600</pubDate>
      
      <guid>https://jackson99011.github.io/blog/post-1/</guid>
      <description>Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.</description>
    </item>
    
  </channel>
</rss>
